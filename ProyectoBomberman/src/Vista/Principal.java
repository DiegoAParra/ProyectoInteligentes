package Vista;

import Agentes.Bomberman;
import Agentes.Fantasma;
import Modelo.Carga;
import Modelo.Grafo;
import Modelo.Nodo;
import jade.core.Agent;
import jade.core.Profile;
import jade.core.ProfileImpl;
import jade.wrapper.AgentController;
import java.awt.Color;
import java.awt.Graphics;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 * Proyecto Sistemas Inteligentes I Clase Main Clase Principal de la interfaz
 * grafica
 *
 * @author Diego Alejandro Parra Medina
 * @author Juan Bernardo Henao Orozco Universidad de Caldas, 2023-1 Universidad
 * de Caldas, 2023-1
 * @version 0.1
 */
public class Principal extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelAlgoritmo = new javax.swing.JLabel();
        jComboBoxAlgoritmo = new javax.swing.JComboBox<>();
        jLabelHeuristica = new javax.swing.JLabel();
        jComboBoxHeuristica = new javax.swing.JComboBox<>();
        jButtonConfirmaAlgoritmo = new javax.swing.JButton();
        jButtonLimpiar = new javax.swing.JButton();
        jButtonCargarMapa = new javax.swing.JButton();
        jButtonNuevoMapa = new javax.swing.JButton();
        jLabelEditarMapa = new javax.swing.JLabel();
        jButtonCamino = new javax.swing.JButton();
        jButtonBomberMan = new javax.swing.JButton();
        jButtonMetal = new javax.swing.JButton();
        jButtonFantasma = new javax.swing.JButton();
        jButtonRocas = new javax.swing.JButton();
        jButtonPuerta = new javax.swing.JButton();
        jButtonPuertaRocas = new javax.swing.JButton();
        jButtonEliminarPuerta = new javax.swing.JButton();
        jButtonSimular = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("BOMBERMAN");
        setBackground(new java.awt.Color(153, 255, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setLocation(new java.awt.Point(260, 20));
        setPreferredSize(new java.awt.Dimension(790, 665));
        setResizable(false);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        jLabelAlgoritmo.setText("Algoritmo:");

        jComboBoxAlgoritmo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Anchura", "Profundidad", "Costo Uniforme", "Beam Search", "Hill Climbing", "A Estrella" }));

        jLabelHeuristica.setText("Heur√≠stica:");

        jComboBoxHeuristica.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Manhattan", "Euclidiana" }));

        jButtonConfirmaAlgoritmo.setText(">>>");
        jButtonConfirmaAlgoritmo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConfirmaAlgoritmoActionPerformed(evt);
            }
        });

        jButtonLimpiar.setText("X");
        jButtonLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLimpiarActionPerformed(evt);
            }
        });

        jButtonCargarMapa.setText("Cargar Mapa");
        jButtonCargarMapa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCargarMapaActionPerformed(evt);
            }
        });

        jButtonNuevoMapa.setText("Nuevo Mapa");
        jButtonNuevoMapa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNuevoMapaActionPerformed(evt);
            }
        });

        jLabelEditarMapa.setText("Editar Mapa");

        jButtonCamino.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Vista/Imagenes/ImagenCamino.jpg"))); // NOI18N
        jButtonCamino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCaminoActionPerformed(evt);
            }
        });

        jButtonBomberMan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Vista/Imagenes/ImagenBomberMan.jpg"))); // NOI18N
        jButtonBomberMan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBomberManActionPerformed(evt);
            }
        });

        jButtonMetal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Vista/Imagenes/ImagenMetal.jpg"))); // NOI18N
        jButtonMetal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMetalActionPerformed(evt);
            }
        });

        jButtonFantasma.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Vista/Imagenes/ImagenFantasma.jpg"))); // NOI18N
        jButtonFantasma.setToolTipText("");
        jButtonFantasma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFantasmaActionPerformed(evt);
            }
        });

        jButtonRocas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Vista/Imagenes/ImagenRocas.jpg"))); // NOI18N
        jButtonRocas.setToolTipText("");
        jButtonRocas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRocasActionPerformed(evt);
            }
        });

        jButtonPuerta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Vista/Imagenes/ImagenPuerta.jpg"))); // NOI18N
        jButtonPuerta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPuertaActionPerformed(evt);
            }
        });

        jButtonPuertaRocas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Vista/Imagenes/ImagenPuertaRocas.jpg"))); // NOI18N
        jButtonPuertaRocas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPuertaRocasActionPerformed(evt);
            }
        });

        jButtonEliminarPuerta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Vista/Imagenes/ImagenEliminarPuerta.jpg"))); // NOI18N
        jButtonEliminarPuerta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEliminarPuertaActionPerformed(evt);
            }
        });

        jButtonSimular.setText("Simular");
        jButtonSimular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSimularActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabelAlgoritmo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBoxAlgoritmo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jLabelHeuristica)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBoxHeuristica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonConfirmaAlgoritmo)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabelEditarMapa)
                        .addGap(50, 50, 50))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jButtonLimpiar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 188, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonPuerta)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonEliminarPuerta))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonRocas)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonPuertaRocas))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonMetal)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonFantasma))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonCamino)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonBomberMan))
                            .addComponent(jButtonCargarMapa, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                            .addComponent(jButtonNuevoMapa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonSimular, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jComboBoxAlgoritmo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelAlgoritmo)
                        .addComponent(jLabelHeuristica)
                        .addComponent(jComboBoxHeuristica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonConfirmaAlgoritmo)
                        .addComponent(jButtonLimpiar))
                    .addComponent(jButtonCargarMapa, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonNuevoMapa)
                .addGap(31, 31, 31)
                .addComponent(jLabelEditarMapa)
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonCamino)
                    .addComponent(jButtonBomberMan))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonMetal)
                    .addComponent(jButtonFantasma))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonRocas)
                    .addComponent(jButtonPuertaRocas))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonPuerta)
                    .addComponent(jButtonEliminarPuerta))
                .addGap(18, 18, 18)
                .addComponent(jButtonSimular)
                .addContainerGap(310, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private Grafo grafo;
    private int m;
    private int n;
    private int tamano;
    private String inicio;
    private String salida;
    private int numeroComodines;
    private int pd;
    private List<String> listaFantasmas = new ArrayList<>();
    private List<String> listaComodines = new ArrayList<>();
    private List<Nodo> listaVisitados = new ArrayList<>();
    private String seleccionado = "";
    private ImageIcon imagenMetal = new ImageIcon(getClass().getResource("Imagenes/ImagenMetal.jpg"));
    private ImageIcon imagenRocas = new ImageIcon(getClass().getResource("Imagenes/ImagenRocas.jpg"));
    private ImageIcon imagenCamino = new ImageIcon(getClass().getResource("Imagenes/ImagenCamino.jpg"));
    private ImageIcon imagenBomberMan = new ImageIcon(getClass().getResource("Imagenes/ImagenBomberMan.jpg"));
    private ImageIcon imagenPuerta = new ImageIcon(getClass().getResource("Imagenes/ImagenPuerta.jpg"));
    private ImageIcon imagenPuertaRocas = new ImageIcon(getClass().getResource("Imagenes/ImagenPuertaRocas.jpg"));
    private ImageIcon imagenFantasma = new ImageIcon(getClass().getResource("Imagenes/ImagenFantasma.jpg"));

    @Override
    public void paint(Graphics g) {
        super.paint(g);

        if (grafo != null) {
            //Pintar mapa
            for (Nodo nodo : grafo.getTablaAdyacencia()) {
                if (nodo.getEstado().equals("C")) {
                    g.drawImage(imagenCamino.getImage(), (nodo.getCoordenadaX() * tamano) + 13, (nodo.getCoordenadaY() * tamano) + 81, tamano, tamano, this);
                } else if (nodo.getEstado().equals("M")) {
                    g.drawImage(imagenMetal.getImage(), (nodo.getCoordenadaX() * tamano) + 13, (nodo.getCoordenadaY() * tamano) + 81, tamano, tamano, this);
                } else if (nodo.getEstado().equals("R")) {
                    g.drawImage(imagenRocas.getImage(), (nodo.getCoordenadaX() * tamano) + 13, (nodo.getCoordenadaY() * tamano) + 81, tamano, tamano, this);
                }

                if (nodo == grafo.getInicio()) {
                    g.drawImage(imagenBomberMan.getImage(), (nodo.getCoordenadaX() * tamano) + 13, (nodo.getCoordenadaY() * tamano) + 81, tamano, tamano, this);
                } else if (nodo == grafo.getSalida()) {
                    if (nodo.getEstado().equals("R")) {
                        g.drawImage(imagenPuertaRocas.getImage(), (nodo.getCoordenadaX() * tamano) + 13, (nodo.getCoordenadaY() * tamano) + 81, tamano, tamano, this);
                    } else {
                        g.drawImage(imagenPuerta.getImage(), (nodo.getCoordenadaX() * tamano) + 13, (nodo.getCoordenadaY() * tamano) + 81, tamano, tamano, this);
                    }
                } else if (listaFantasmas.contains(nodo.getId())) {
                    g.drawImage(imagenFantasma.getImage(), (nodo.getCoordenadaX() * tamano) + 13, (nodo.getCoordenadaY() * tamano) + 81, tamano, tamano, this);
                }

                if (!listaVisitados.isEmpty()) {
                    for (Nodo nodoVisitado : listaVisitados) {
                        g.setColor(Color.WHITE);
                        g.drawString("" + listaVisitados.indexOf(nodoVisitado), (nodoVisitado.getCoordenadaX() * tamano) + 15, (nodoVisitado.getCoordenadaY() * tamano) + 93);
                    }
                }
            }
        }
    }

    private void jButtonCargarMapaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCargarMapaActionPerformed
        listaVisitados.clear();

        Carga carga = new Carga();
        grafo = carga.cargarTXT();

        n = carga.calculoN(); //Calculo N -> x
        m = carga.calculoM(); //Calculo M -> y
        tamano = 570 / Math.max(n, m);

        repaint(); //Pinta el mapa
    }//GEN-LAST:event_jButtonCargarMapaActionPerformed

    private void jButtonNuevoMapaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNuevoMapaActionPerformed
        //Interfaz grafica de nuevo mapa
        String entradaX = JOptionPane.showInputDialog("Introduzca el tama√±o en x:");
        String entradaY = JOptionPane.showInputDialog("Introduzca el tama√±o en y:");
        try {
            int x = Integer.parseInt(entradaX);
            int y = Integer.parseInt(entradaY);
            if (x > 0 && x < 25 && y > 0 && y < 25) {
                grafo = new Grafo(x * y);
                for (int i = 0; i < x; i++) {
                    for (int j = 0; j < y; j++) {
                        grafo.nuevoNodo(i + "," + j, "C", i, j);
                    }
                }
                listaVisitados.clear();
                n = x;
                m = y;
                tamano = 570 / Math.max(x, y);

                for (int i = 0; i < y; i++) {
                    for (int j = 0; j < x; j++) {
                        try {
                            grafo.nuevaArista(i + "," + j, i + "," + (j + 1)); //Abajo
                        } catch (Exception e) {
                        }
                        try {
                            grafo.nuevaArista(i + "," + j, (i + 1) + "," + j); //Derecha
                        } catch (Exception e) {
                        }
                        try {
                            grafo.nuevaArista(i + "," + j, i + "," + (j - 1)); //Arriba
                        } catch (Exception e) {
                        }
                        try {
                            grafo.nuevaArista(i + "," + j, (i - 1) + "," + j); //Izquierda
                        } catch (Exception e) {
                        }
                    }
                }
                repaint();
            } else {
                System.out.println("Medidas no validas");
            }
        } catch (Exception e) {
            System.out.println("Formato no valido");
        }
    }//GEN-LAST:event_jButtonNuevoMapaActionPerformed

    private void jButtonConfirmaAlgoritmoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConfirmaAlgoritmoActionPerformed
        String algoritmo = jComboBoxAlgoritmo.getSelectedItem().toString();
        String heuristica = jComboBoxHeuristica.getSelectedItem().toString();

        if (grafo != null && grafo.getInicio() != null && grafo.getSalida() != null && listaFantasmas.isEmpty()) {
            if (algoritmo.equals("Anchura")) {
                System.out.println("* * * Anchura * * *");
                listaVisitados = grafo.anchura(grafo.getTablaAdyacencia()[grafo.numNodo(inicio)], grafo.getTablaAdyacencia()[grafo.numNodo(salida)]);
            } else if (algoritmo.equals("Profundidad")) {
                System.out.println("* * * Profundidad * * *");
                listaVisitados = grafo.profundidad(grafo.getTablaAdyacencia()[grafo.numNodo(inicio)], grafo.getTablaAdyacencia()[grafo.numNodo(salida)], listaVisitados);
            } else if (algoritmo.equals("Costo Uniforme")) {
                System.out.println("* * * Costo Uniforme * * *");
                listaVisitados = grafo.costoUniforme(grafo.getTablaAdyacencia()[grafo.numNodo(inicio)], grafo.getTablaAdyacencia()[grafo.numNodo(salida)]);
            } else {
                if (heuristica.equals("Manhattan")) {
                    if (algoritmo.equals("Beam Search")) {
                        System.out.println("* * * Beam Search * * *");
                        System.out.println("Heur√≠stica: Manhattan");
                        listaVisitados = grafo.beamSearch(grafo.getTablaAdyacencia()[grafo.numNodo(inicio)], grafo.getTablaAdyacencia()[grafo.numNodo(salida)], "1");
                    } else if (algoritmo.equals("Hill Climbing")) {
                        System.out.println("* * * Hill Climbing * * *");
                        System.out.println("Heur√≠stica: Manhattan");
                        listaVisitados = grafo.hillClimbing(grafo.getTablaAdyacencia()[grafo.numNodo(inicio)], grafo.getTablaAdyacencia()[grafo.numNodo(salida)], "1");
                    } else if (algoritmo.equals("A Estrella")) {
                        System.out.println("* * * A Estrella * * *");
                        System.out.println("Heur√≠stica: Manhattan");
                        listaVisitados = grafo.aEstrella(grafo.getTablaAdyacencia()[grafo.numNodo(inicio)], grafo.getTablaAdyacencia()[grafo.numNodo(salida)], "1");
                    }
                } else if (heuristica.equals("Euclidiana")) {
                    if (algoritmo.equals("Beam Search")) {
                        System.out.println("* * * Beam Search * * *");
                        System.out.println("Heur√≠stica: Euclidiana");
                        listaVisitados = grafo.beamSearch(grafo.getTablaAdyacencia()[grafo.numNodo(inicio)], grafo.getTablaAdyacencia()[grafo.numNodo(salida)], "2");
                    } else if (algoritmo.equals("Hill Climbing")) {
                        System.out.println("* * * Hill Climbing * * *");
                        System.out.println("Heur√≠stica: Euclidiana");
                        listaVisitados = grafo.hillClimbing(grafo.getTablaAdyacencia()[grafo.numNodo(inicio)], grafo.getTablaAdyacencia()[grafo.numNodo(salida)], "2");
                    } else if (algoritmo.equals("A Estrella")) {
                        System.out.println("* * * A Estrella * * *");
                        System.out.println("Heur√≠stica: Euclidiana");
                        listaVisitados = grafo.aEstrella(grafo.getTablaAdyacencia()[grafo.numNodo(inicio)], grafo.getTablaAdyacencia()[grafo.numNodo(salida)], "2");
                    }
                }
            }
            grafo.imprimirRecorrido(listaVisitados);
            repaint(); //Pinta el mapa
        }
    }//GEN-LAST:event_jButtonConfirmaAlgoritmoActionPerformed

    private void jButtonCaminoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCaminoActionPerformed
        seleccionado = "C";
    }//GEN-LAST:event_jButtonCaminoActionPerformed

    private void jButtonRocasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRocasActionPerformed
        seleccionado = "R";
    }//GEN-LAST:event_jButtonRocasActionPerformed

    private void jButtonMetalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMetalActionPerformed
        seleccionado = "M";
    }//GEN-LAST:event_jButtonMetalActionPerformed

    private void jButtonBomberManActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBomberManActionPerformed
        seleccionado = "Inicio";
    }//GEN-LAST:event_jButtonBomberManActionPerformed

    private void jButtonPuertaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPuertaActionPerformed
        seleccionado = "Salida";
    }//GEN-LAST:event_jButtonPuertaActionPerformed

    private void jButtonLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLimpiarActionPerformed
        listaVisitados.clear();
        repaint();
    }//GEN-LAST:event_jButtonLimpiarActionPerformed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        listaVisitados.clear();
        repaint();
        int x = evt.getX();
        int coorX = -1;
        int y = evt.getY();
        int coorY = -1;
        if (grafo != null && x > 13 && x < 583 && y > 81 && y < 650) {
            for (int i = 13; i < 583;) {
                if (x > i) {
                    coorX++;
                }
                i += tamano;
            }
            for (int j = 81; j < 650;) {
                if (y > j) {
                    coorY++;
                }
                j += tamano;
            }
            if (coorX < n && coorY < m) {
                Nodo n = grafo.getTablaAdyacencia()[grafo.numNodo(coorX + "," + coorY)];
                String est = grafo.getTablaAdyacencia()[grafo.numNodo(coorX + "," + coorY)].getEstado();
                if (seleccionado.equals("Inicio")) {
                    grafo.getTablaAdyacencia()[grafo.numNodo(coorX + "," + coorY)].setEstado("C");
                    grafo.setInicio(n);
                    inicio = coorX + "," + coorY;
                } else if (seleccionado.equals("Salida")) {
                    if (est.equals("R") || est.equals("C")) {
                        grafo.setSalida(n);
                        salida = coorX + "," + coorY;
                    }
                } else if (seleccionado.equals("Eliminar_salida")) {
                    if (est.equals("R") || est.equals("C")) {
                        grafo.setSalida(null);
                        salida = null;
                    }
                } else if (seleccionado.equals("R_salida")) {
                    grafo.getTablaAdyacencia()[grafo.numNodo(coorX + "," + coorY)].setEstado("R");
                    grafo.setSalida(n);
                    salida = coorX + "," + coorY;
                } else if (seleccionado.equals("Fantasma")) {
                    grafo.getTablaAdyacencia()[grafo.numNodo(coorX + "," + coorY)].setEstado("C");
                    listaFantasmas.add(coorX + "," + coorY);
                } else if (seleccionado.equals("C")) {
                    try {
                        if (inicio.equals(coorX + "," + coorY)) {
                            grafo.setInicio(null);
                            inicio = null;
                        } else if (listaFantasmas.contains(coorX + "," + coorY)) {
                            listaFantasmas.remove(coorX + "," + coorY);
                        }
                    } catch (Exception e) {
                    }
                    grafo.getTablaAdyacencia()[grafo.numNodo(coorX + "," + coorY)].setEstado("C");
                } else if (seleccionado.equals("M")) {
                    try {
                        if (inicio.equals(coorX + "," + coorY)) {
                            grafo.setInicio(null);
                            inicio = null;
                        } else if (listaFantasmas.contains(coorX + "," + coorY)) {
                            listaFantasmas.remove(coorX + "," + coorY);
                        } else if (salida.equals(coorX + "," + coorY)) {
                            grafo.setSalida(null);
                            salida = null;
                        }
                    } catch (Exception e) {
                    }
                    grafo.getTablaAdyacencia()[grafo.numNodo(coorX + "," + coorY)].setEstado("M");
                } else if (seleccionado.equals("R")) {
                    try {
                        if (inicio.equals(coorX + "," + coorY)) {
                            grafo.setInicio(null);
                            inicio = null;
                        } else if (listaFantasmas.contains(coorX + "," + coorY)) {
                            listaFantasmas.remove(coorX + "," + coorY);
                        } else if (salida.equals(coorX + "," + coorY)) {
                            grafo.setSalida(null);
                            salida = null;
                        }
                    } catch (Exception e) {
                    }
                    grafo.getTablaAdyacencia()[grafo.numNodo(coorX + "," + coorY)].setEstado("R");
                }
                repaint();
            }
        }
    }//GEN-LAST:event_formMouseClicked

    private void jButtonFantasmaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFantasmaActionPerformed
        seleccionado = "Fantasma";
    }//GEN-LAST:event_jButtonFantasmaActionPerformed

    private void jButtonPuertaRocasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPuertaRocasActionPerformed
        seleccionado = "R_salida";
    }//GEN-LAST:event_jButtonPuertaRocasActionPerformed

    private void jButtonEliminarPuertaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEliminarPuertaActionPerformed
        seleccionado = "Eliminar_salida";
    }//GEN-LAST:event_jButtonEliminarPuertaActionPerformed

    private void jButtonSimularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSimularActionPerformed
        if (grafo != null && grafo.getInicio() != null) {
            numeroComodines = -1;
            int x = (int) (Math.random() * n);
            int y = (int) (Math.random() * m);
            if (salida == null) {
                while (!grafo.getTablaAdyacencia()[grafo.numNodo(x + "," + y)].getEstado().equals("R")) {
                    x = (int) (Math.random() * n);
                    y = (int) (Math.random() * m);
                }
                grafo.setSalida(grafo.getTablaAdyacencia()[grafo.numNodo(x + "," + y)]);
                salida = x + "," + y;
            }
            while (numeroComodines < 0) {
                try {
                    numeroComodines = Integer.parseInt(JOptionPane.showInputDialog("Introduzca la cantidad de comodines:"));
                } catch (Exception e) {
                }
            }
            int cont = 0;
            while (cont != numeroComodines) {
                x = (int) (Math.random() * n);
                y = (int) (Math.random() * m);
                if (grafo.getTablaAdyacencia()[grafo.numNodo(x + "," + y)].getEstado().equals("R") && !listaComodines.contains(x + "," + y)) {
                    listaComodines.add(x + "," + y);
                    cont++;
                }
            }
            pd = 1;

            //JADE:
            jade.core.Runtime runtime = jade.core.Runtime.instance();
            Profile profile = new ProfileImpl();
            jade.wrapper.AgentContainer container = runtime.createMainContainer(profile);
            Agent agentBomberman = new Bomberman(this);
            Agent agentFantasma = new Fantasma();
            AgentController acBomberman;
            AgentController acFantasma;
            try {
                acBomberman = container.acceptNewAgent("bomberman", agentBomberman);
                acFantasma = container.acceptNewAgent("fantasma", agentFantasma);
                acBomberman.start();
                acFantasma.start();
            } catch (Exception e) {
            }
            repaint();
        } else {
        }
    }//GEN-LAST:event_jButtonSimularActionPerformed

    public Grafo getGrafo(){
        return grafo;
    }

    public String getInicio() {
        return inicio;
    }

    public void setInicio(String inicio) {
        this.inicio = inicio;
    }

    public String getSalida() {
        return salida;
    }

    public void setSalida(String salida) {
        this.salida = salida;
    }

    public int getNumeroComodines() {
        return numeroComodines;
    }

    public void setNumeroComodines(int numeroComodines) {
        this.numeroComodines = numeroComodines;
    }

    public int getPd() {
        return pd;
    }

    public void setPd(int pd) {
        this.pd = pd;
    }

    public List<String> getListaFantasmas() {
        return listaFantasmas;
    }

    public void setListaFantasmas(List<String> listaFantasmas) {
        this.listaFantasmas = listaFantasmas;
    }

    public List<String> getListaComodines() {
        return listaComodines;
    }

    public void setListaComodines(List<String> listaComodines) {
        this.listaComodines = listaComodines;
    }

    public List<Nodo> getListaVisitados() {
        return listaVisitados;
    }

    public void setListaVisitados(List<Nodo> listaVisitados) {
        this.listaVisitados = listaVisitados;
    }
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBomberMan;
    private javax.swing.JButton jButtonCamino;
    private javax.swing.JButton jButtonCargarMapa;
    private javax.swing.JButton jButtonConfirmaAlgoritmo;
    private javax.swing.JButton jButtonEliminarPuerta;
    private javax.swing.JButton jButtonFantasma;
    private javax.swing.JButton jButtonLimpiar;
    private javax.swing.JButton jButtonMetal;
    private javax.swing.JButton jButtonNuevoMapa;
    private javax.swing.JButton jButtonPuerta;
    private javax.swing.JButton jButtonPuertaRocas;
    private javax.swing.JButton jButtonRocas;
    private javax.swing.JButton jButtonSimular;
    private javax.swing.JComboBox<String> jComboBoxAlgoritmo;
    private javax.swing.JComboBox<String> jComboBoxHeuristica;
    private javax.swing.JLabel jLabelAlgoritmo;
    private javax.swing.JLabel jLabelEditarMapa;
    private javax.swing.JLabel jLabelHeuristica;
    // End of variables declaration//GEN-END:variables
}
