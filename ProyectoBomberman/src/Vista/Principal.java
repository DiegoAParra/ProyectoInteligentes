package Vista;

import Modelo.Carga;
import Modelo.Grafo;
import Modelo.Nodo;
import java.awt.Color;
import java.awt.Graphics;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ImageIcon;

/**
 * Proyecto Sistemas Inteligentes I Clase Main Clase Principal de la interfaz
 * grafica
 *
 * @author Diego Alejandro Parra Medina
 * @author Juan Bernardo Henao Orozco Universidad de Caldas, 2023-1 Universidad
 * de Caldas, 2023-1
 * @version 0.1
 */
public class Principal extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelAlgoritmo = new javax.swing.JLabel();
        jComboBoxAlgoritmo = new javax.swing.JComboBox<>();
        jLabelHeuristica = new javax.swing.JLabel();
        jComboBoxHeuristica = new javax.swing.JComboBox<>();
        jButtonConfirmaAlgoritmo = new javax.swing.JButton();
        jButtonLimpiar = new javax.swing.JButton();
        jButtonCargarMapa = new javax.swing.JButton();
        jButtonNuevoMapa = new javax.swing.JButton();
        jLabelEditarMapa = new javax.swing.JLabel();
        jButtonCamino = new javax.swing.JButton();
        jButtonRocas = new javax.swing.JButton();
        jButtonMetal = new javax.swing.JButton();
        jButtonBomberMan = new javax.swing.JButton();
        jButtonPuerta = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("BOMBERMAN");
        setBackground(new java.awt.Color(153, 255, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setLocation(new java.awt.Point(260, 20));
        setPreferredSize(new java.awt.Dimension(790, 665));
        setResizable(false);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        jLabelAlgoritmo.setText("Algoritmo:");

        jComboBoxAlgoritmo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Anchura", "Profundidad", "Costo Uniforme", "Beam Search", "Hill Climbing", "A Estrella" }));

        jLabelHeuristica.setText("Heur√≠stica:");

        jComboBoxHeuristica.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Manhattan", "Euclidiana" }));

        jButtonConfirmaAlgoritmo.setText(">>>");
        jButtonConfirmaAlgoritmo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConfirmaAlgoritmoActionPerformed(evt);
            }
        });

        jButtonLimpiar.setText("X");
        jButtonLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLimpiarActionPerformed(evt);
            }
        });

        jButtonCargarMapa.setText("Cargar Mapa");
        jButtonCargarMapa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCargarMapaActionPerformed(evt);
            }
        });

        jButtonNuevoMapa.setText("Nuevo Mapa");
        jButtonNuevoMapa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNuevoMapaActionPerformed(evt);
            }
        });

        jLabelEditarMapa.setText("Editar Mapa");

        jButtonCamino.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Vista/Imagenes/ImagenCamino.jpg"))); // NOI18N
        jButtonCamino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCaminoActionPerformed(evt);
            }
        });

        jButtonRocas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Vista/Imagenes/ImagenRocas.jpg"))); // NOI18N
        jButtonRocas.setToolTipText("");
        jButtonRocas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRocasActionPerformed(evt);
            }
        });

        jButtonMetal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Vista/Imagenes/ImagenMetal.jpg"))); // NOI18N
        jButtonMetal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMetalActionPerformed(evt);
            }
        });

        jButtonBomberMan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Vista/Imagenes/ImagenBomberMan.jpg"))); // NOI18N
        jButtonBomberMan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBomberManActionPerformed(evt);
            }
        });

        jButtonPuerta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Vista/Imagenes/ImagenPuerta.jpg"))); // NOI18N
        jButtonPuerta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPuertaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabelAlgoritmo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBoxAlgoritmo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jLabelHeuristica)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBoxHeuristica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonConfirmaAlgoritmo)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jButtonLimpiar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 188, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButtonCargarMapa, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                            .addComponent(jButtonNuevoMapa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabelEditarMapa)
                                .addGap(50, 50, 50))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jButtonPuerta)
                                    .addComponent(jButtonBomberMan)
                                    .addComponent(jButtonRocas)
                                    .addComponent(jButtonCamino)
                                    .addComponent(jButtonMetal))
                                .addGap(29, 29, 29))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jComboBoxAlgoritmo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelAlgoritmo)
                        .addComponent(jLabelHeuristica)
                        .addComponent(jComboBoxHeuristica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonConfirmaAlgoritmo)
                        .addComponent(jButtonLimpiar))
                    .addComponent(jButtonCargarMapa, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonNuevoMapa)
                .addGap(31, 31, 31)
                .addComponent(jLabelEditarMapa)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonCamino)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonRocas)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonMetal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonBomberMan)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonPuerta)
                .addContainerGap(134, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private Grafo grafo;
    private int m;
    private int n;
    private int tamano;
    private String inicio;
    private String salida;
    private List<Nodo> listaVisitados = new ArrayList<>();
    private String seleccionado = "";
    private ImageIcon imagenMetal = new ImageIcon(getClass().getResource("Imagenes/ImagenMetal.jpg"));
    private ImageIcon imagenRocas = new ImageIcon(getClass().getResource("Imagenes/ImagenRocas.jpg"));
    private ImageIcon imagenCamino = new ImageIcon(getClass().getResource("Imagenes/ImagenCamino.jpg"));
    private ImageIcon imagenBomberMan = new ImageIcon(getClass().getResource("Imagenes/ImagenBomberMan.jpg"));
    private ImageIcon imagenPuerta = new ImageIcon(getClass().getResource("Imagenes/ImagenPuerta.jpg"));

    @Override
    public void paint(Graphics g) {
        super.paint(g);

        if (grafo != null) {
            //Pintar mapa
            for (Nodo nodo : grafo.getTablaAdyacencia()) {
                if (nodo.getEstado().equals("C")) {
                    g.drawImage(imagenCamino.getImage(), (nodo.getCoordenadaX() * tamano) + 13, (nodo.getCoordenadaY() * tamano) + 81, tamano, tamano, this);
                } else if (nodo.getEstado().equals("M")) {
                    g.drawImage(imagenMetal.getImage(), (nodo.getCoordenadaX() * tamano) + 13, (nodo.getCoordenadaY() * tamano) + 81, tamano, tamano, this);
                } else if (nodo.getEstado().equals("R")) {
                    g.drawImage(imagenRocas.getImage(), (nodo.getCoordenadaX() * tamano) + 13, (nodo.getCoordenadaY() * tamano) + 81, tamano, tamano, this);
                }
                if(nodo == grafo.getInicio()){
                    g.drawImage(imagenBomberMan.getImage(), (nodo.getCoordenadaX() * tamano) + 13, (nodo.getCoordenadaY() * tamano) + 81, tamano, tamano, this);
                } else if(nodo == grafo.getSalida()){
                    g.drawImage(imagenPuerta.getImage(), (nodo.getCoordenadaX() * tamano) + 13, (nodo.getCoordenadaY() * tamano) + 81, tamano, tamano, this);
                }
                if (!listaVisitados.isEmpty()) {
                    for (Nodo nodoVisitado : listaVisitados) {
                        g.setColor(Color.WHITE);
                        g.drawString("" + listaVisitados.indexOf(nodoVisitado), (nodoVisitado.getCoordenadaX() * tamano) + 15, (nodoVisitado.getCoordenadaY() * tamano) + 93);
                    }
                }
            }
        }
    }

    private void jButtonCargarMapaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCargarMapaActionPerformed
        listaVisitados.clear();

        Carga carga = new Carga();
        grafo = carga.cargarTXT();

        n = carga.calculoN(); //Calculo N -> x
        m = carga.calculoM(); //Calculo M -> y
        tamano = 570 / Math.max(n, m);

        repaint(); //Pinta el mapa
    }//GEN-LAST:event_jButtonCargarMapaActionPerformed

    private void jButtonNuevoMapaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNuevoMapaActionPerformed
        listaVisitados.clear();
        grafo = null;
        repaint();
    }//GEN-LAST:event_jButtonNuevoMapaActionPerformed

    private void jButtonConfirmaAlgoritmoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConfirmaAlgoritmoActionPerformed
        String algoritmo = jComboBoxAlgoritmo.getSelectedItem().toString();
        String heuristica = jComboBoxHeuristica.getSelectedItem().toString();

        if (grafo != null && grafo.getInicio() != null && grafo.getSalida() != null) {
            if (algoritmo.equals("Anchura")) {
                System.out.println("* * * Anchura * * *");
                listaVisitados = grafo.anchura(grafo.getTablaAdyacencia()[grafo.numNodo(inicio)], grafo.getTablaAdyacencia()[grafo.numNodo(salida)]);
            } else if (algoritmo.equals("Profundidad")) {
                System.out.println("* * * Profundidad * * *");
                listaVisitados = grafo.profundidad(grafo.getTablaAdyacencia()[grafo.numNodo(inicio)], grafo.getTablaAdyacencia()[grafo.numNodo(salida)], listaVisitados);
            } else if (algoritmo.equals("Costo Uniforme")) {
                System.out.println("* * * Costo Uniforme * * *");
                listaVisitados = grafo.costoUniforme(grafo.getTablaAdyacencia()[grafo.numNodo(inicio)], grafo.getTablaAdyacencia()[grafo.numNodo(salida)]);
            } else {
                if (heuristica.equals("Manhattan")) {
                    if (algoritmo.equals("Beam Search")) {
                        System.out.println("* * * Beam Search * * *");
                        System.out.println("Heur√≠stica: Manhattan");
                        listaVisitados = grafo.beamSearch(grafo.getTablaAdyacencia()[grafo.numNodo(inicio)], grafo.getTablaAdyacencia()[grafo.numNodo(salida)], "1");
                    } else if (algoritmo.equals("Hill Climbing")) {
                        System.out.println("* * * Hill Climbing * * *");
                        System.out.println("Heur√≠stica: Manhattan");
                        listaVisitados = grafo.hillClimbing(grafo.getTablaAdyacencia()[grafo.numNodo(inicio)], grafo.getTablaAdyacencia()[grafo.numNodo(salida)], "1");
                    } else if (algoritmo.equals("A Estrella")) {
                        System.out.println("* * * A Estrella * * *");
                        System.out.println("Heur√≠stica: Manhattan");
                        listaVisitados = grafo.aEstrella(grafo.getTablaAdyacencia()[grafo.numNodo(inicio)], grafo.getTablaAdyacencia()[grafo.numNodo(salida)], "1");
                    }
                } else if (heuristica.equals("Euclidiana")) {
                    if (algoritmo.equals("Beam Search")) {
                        System.out.println("* * * Beam Search * * *");
                        System.out.println("Heur√≠stica: Euclidiana");
                        listaVisitados = grafo.beamSearch(grafo.getTablaAdyacencia()[grafo.numNodo(inicio)], grafo.getTablaAdyacencia()[grafo.numNodo(salida)], "2");
                    } else if (algoritmo.equals("Hill Climbing")) {
                        System.out.println("* * * Hill Climbing * * *");
                        System.out.println("Heur√≠stica: Euclidiana");
                        listaVisitados = grafo.hillClimbing(grafo.getTablaAdyacencia()[grafo.numNodo(inicio)], grafo.getTablaAdyacencia()[grafo.numNodo(salida)], "2");
                    } else if (algoritmo.equals("A Estrella")) {
                        System.out.println("* * * A Estrella * * *");
                        System.out.println("Heur√≠stica: Euclidiana");
                        listaVisitados = grafo.aEstrella(grafo.getTablaAdyacencia()[grafo.numNodo(inicio)], grafo.getTablaAdyacencia()[grafo.numNodo(salida)], "2");
                    }
                }
            }
            grafo.imprimirRecorrido(listaVisitados);
            repaint(); //Pinta el mapa
        }
    }//GEN-LAST:event_jButtonConfirmaAlgoritmoActionPerformed

    private void jButtonCaminoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCaminoActionPerformed
        seleccionado = "C";
        listaVisitados.clear();
        repaint();
    }//GEN-LAST:event_jButtonCaminoActionPerformed

    private void jButtonRocasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRocasActionPerformed
        seleccionado = "R";
        listaVisitados.clear();
        repaint();
    }//GEN-LAST:event_jButtonRocasActionPerformed

    private void jButtonMetalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMetalActionPerformed
        seleccionado = "M";
        listaVisitados.clear();
        repaint();
    }//GEN-LAST:event_jButtonMetalActionPerformed

    private void jButtonBomberManActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBomberManActionPerformed
        seleccionado = "Inicio";
        listaVisitados.clear();
        repaint();
    }//GEN-LAST:event_jButtonBomberManActionPerformed

    private void jButtonPuertaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPuertaActionPerformed
        seleccionado = "Salida";
        listaVisitados.clear();
        repaint();
    }//GEN-LAST:event_jButtonPuertaActionPerformed

    private void jButtonLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLimpiarActionPerformed
        listaVisitados.clear();
        repaint();
    }//GEN-LAST:event_jButtonLimpiarActionPerformed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        int x = evt.getX();
        int coorX = -1;
        int y = evt.getY();
        int coorY = -1;
        if (grafo != null && x > 13 && x < 583 && y > 81 && y < 650) {
            for (int i = 13; i < 583;) {
                if (x > i) {
                    coorX++;
                }
                i += tamano;
            }
            for (int j = 81; j < 650;) {
                if (y > j) {
                    coorY++;
                }
                j += tamano;
            }
            if(coorX < n && coorY < m){
                Nodo n = grafo.getTablaAdyacencia()[grafo.numNodo(coorX + "," + coorY)];
                if(seleccionado.equals("Inicio")){
                    grafo.setInicio(n);
                    inicio = coorX + "," + coorY;
                } else if(seleccionado.equals("Salida")){
                    grafo.setSalida(n);
                    salida = coorX + "," + coorY;
                } else if(seleccionado.equals("C")){
                    grafo.getTablaAdyacencia()[grafo.numNodo(coorX + "," + coorY)].setEstado("C");
                } else if(seleccionado.equals("M")){
                    grafo.getTablaAdyacencia()[grafo.numNodo(coorX + "," + coorY)].setEstado("M");
                } else if(seleccionado.equals("R")){
                    grafo.getTablaAdyacencia()[grafo.numNodo(coorX + "," + coorY)].setEstado("R");
                }
                repaint();
            }
        }
    }//GEN-LAST:event_formMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBomberMan;
    private javax.swing.JButton jButtonCamino;
    private javax.swing.JButton jButtonCargarMapa;
    private javax.swing.JButton jButtonConfirmaAlgoritmo;
    private javax.swing.JButton jButtonLimpiar;
    private javax.swing.JButton jButtonMetal;
    private javax.swing.JButton jButtonNuevoMapa;
    private javax.swing.JButton jButtonPuerta;
    private javax.swing.JButton jButtonRocas;
    private javax.swing.JComboBox<String> jComboBoxAlgoritmo;
    private javax.swing.JComboBox<String> jComboBoxHeuristica;
    private javax.swing.JLabel jLabelAlgoritmo;
    private javax.swing.JLabel jLabelEditarMapa;
    private javax.swing.JLabel jLabelHeuristica;
    // End of variables declaration//GEN-END:variables

}
